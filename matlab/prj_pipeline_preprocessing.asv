
if ~exist(sub, 'var')
  error('subject needs to be defined');
end

if ~exist(ses, 'var')
  warning('session is not defined, assumed to be 1');
  ses = [];
end

%%
% define the struct that contains the subject's metadata
subj = prj_subjinfo(sub, ses);

%%
% define the epochs for artifact detection; this does not need to be a very
% constrained set of epochs, and ideally should be defined widely enough
% that all potentially relevant parts of the dataset are covered, ideally
% excluding the breaks etc. (which will be artifact rich anyhow). If
% nothing is defined here, the code below will explore the full dataset,
% excluding the first and last 5 seconds, to avoid file reading problems
% (beyond the edges of the datafile)

% %%
% hdr = ft_read_header(subj.dataset);
% trl = [5*hdr.Fs hdr.nSamples*hdr.nTrials-5*hdr.Fs 0];

%% 
% epoch definition for /project/3026001.01 (test project to write code in
% this repo) -> replace this with your own trl-definition machinery
val = repmat([10 30 50 70]',[1 4]) + repmat([3 4 6 8],[4 1]);
val = val(:);

cfg = [];
cfg.dataset             = subj.dataset;
cfg.trialdef.eventtype  = 'UPPT001';
cfg.trialdef.eventvalue = val;
cfg.trialdef.prestim    = 1; 
cfg.trialdef.poststim   = 1.5;
cfg = ft_definetrial(cfg);
trl = cfg.trl;


%%
% detect squidjumps
cfg = prj_util_artifactdetect_squidjumps(subj.dataset, trl);
filename = fullfile(subj.procdir, sprintf('%s_%s_squidjumps.mat', subj.subjname, subj.sessname));
save(filename, 'cfg');

% detect muscle artifacts
cfg = prj_util_artifactdetect_muscle(subj.dataset, trl);
filename = fullfile(subj.procdir, sprintf('%s_%s_muscle.mat', subj.subjname, subj.sessname));
save(filename, 'cfg');

% detect eyeblink artifacts
cfg = prj_util_artifactdetect_eyeblinks(subj.dataset, trl);
filename = fullfile(subj.procdir, sprintf('%s_%s_eyeblinks.mat', subj.subjname, subj.sessname))
save(filename, 'cfg');

%%
% reject the artifacts from the data, this requires a data-structure
% (non-resampled) to exist in memory

type = {'squidjumps' 'muscle' 'eyblinks'};
for k = 1:numel(type)
filename = fullfile(subj.procdir, sprintf('%s_%s_squidjumps.mat', subj.subjname, subj.sessname));
if exist(filename, 'file')
  load(filename);
  artfctdef.jump   = cfg.artfctdef.zvalue;
  clear cfg
end
end

  
cfg                        = [];
cfg.artfctdef              = artfctdef;
cfg.artfctdef.reject       = 'nan';
data                       = ft_rejectartifact(cfg, data);